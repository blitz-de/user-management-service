version: '3.9'


services:
#======================================================
  user_manage_api:
    build:
      context: .
      dockerfile: ./docker/local/django/Dockerfile
    command: /start
    image: user_api
    container_name: userapp2
    restart: always
#    ports:
#      - "8004:8004"
    env_file:
      - .env
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
    depends_on:
#      - queue
      - postgres-db
    networks:
      - tennis-react


  nginx:
    restart: always
    depends_on:
      - user_manage_api
    container_name: nginx_container2
    volumes:
      - static_volume:/app/staticfiles/
      - media_volume:/app/mediafiles/
    build:
      context: ./docker/local/nginx
      dockerfile: Dockerfile
    ports:
      - "8080:80"
    networks:
      - tennis-react # this network


      #======================================================
  queue:
    build:
      context: .
      dockerfile: ./docker/local/rabbitmq/Dockerfile
    image: user_queue_image
    container_name: user_queue2
    env_file:
      - .env
    command: 'python consumer.py'
    restart: on-failure
    depends_on:
      - postgres-db
    networks:
      - tennis-react
  #======================================================

  postgres-db:
    image: postgres:12.0-alpine
    container_name: user_db2
    ports:
      - "54322:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
#zacki@gmail.com,123456
    env_file:
      - "./database.env"
#    environment:
#      POSTGRES_USER: ${POSTGRES_USER}
#      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#      POSTGRES_DB: ${POSTGRES_DB}
    networks:
    - tennis-react

networks:
  tennis-react:
    name: users_network


volumes:
    postgres_data:
    static_volume:
    media_volume: