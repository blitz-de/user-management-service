version: '3.9'


services:
#======================================================
  user_manage_api:
    build:
      context: .
      dockerfile: ./docker/local/django/Dockerfile
    command: /start
    image: user_api
    container_name: userapp
#    ports:
#      - "8002:8002"
    env_file:
      - .env
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
    depends_on:
#      - queue
      - postgres-db
    networks:
      - tennis-react

  nginx:
    restart: always
    depends_on:
      - user_manage_api
    volumes:
      - static_volume:/app/staticfiles/
      - media_volume:/app/mediafiles/
    build:
      context: ./docker/local/nginx
      dockerfile: Dockerfile
    ports:
      - "8080:80"
    networks:
      - tennis-react


        #======================================================
#  queue:
#    image: rabbitmq
#    container_name: user_queue
#    build:
#      context: .
#      dockerfile: ./docker/local/django/Dockerfile
##    command: 'python -u consumer.py'
#    volumes:
#      - .:/app
#    depends_on:
#      - postgres-db
#    networks:
#      - tennis-react

  #  rabbitmq3:
#    container_name: "rabbitmq"
#    image: rabbitmq:3.8-management-alpine
#    environment:
#      - RABBITMQ_DEFAULT_USER=myuser
#      - RABBITMQ_DEFAULT_PASS=mypassword
#    ports:
#      # AMQP protocol port
#      - '5672:5672'
#      # HTTP management UI
#      - '15672:15672'
  #======================================================

  postgres-db:
    image: postgres:12.0-alpine
    container_name: user_db
    ports:
      - "5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
#zacki@gmail.com,123456
    env_file:
      - "./database.env"
#    environment:
#      POSTGRES_USER: ${POSTGRES_USER}
#      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#      POSTGRES_DB: ${POSTGRES_DB}
    networks:
    - tennis-react

networks:
  tennis-react:
    driver: bridge

volumes:
    postgres_data:
    static_volume:
    media_volume: